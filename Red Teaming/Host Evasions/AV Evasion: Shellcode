Evade Anti-virus software
-upload shell code .exe file and gain a shell to find flags

Which Antivirus software is running on the vm?
-Windows Defender

-------------------------------------------------------------------------------------------------

PE: Windows Executable file format
-has various sections 
1. Headers: metadata, data pointers, entry point, section tables
2. Sections: code, imports and data

example of windows loader reads an executable binary and runs it as a process
1. type of file, file signature, compiled for x86 or x64, creation timestamp
2. parse number of sections the file contains
3. mapping file contents into memory based on entrypoint address or relative virtual address
4. import dlls, and other objects into memory
5. entrypoint address is located and main function runs

-malware analysts analyze exe files based on information in the PE header
-control data section to store shellcode
1. shellcode as local variable in the main function (.TEXT)
2. shellcode as global vairable (.Data)
3. shellcode as raw binary in an icon image (.rsrc)

PE-Bear
-tool used to parse EXE files and read details
File -> Load PEs
thm-intro2PE.exe
->General->MD5
530949

->DOS Hdr->Magic number->value
5A4D

-Optional Hdr->Entry Point
12E4

-File Hdr->Sections Count
7

name of the extra section
.flag

-click on .flag
THM{PE-N3w-s3ction!}

-------------------------------------------------------------------------------------------------------------------------------------------

Introduction to shellcode
-crafted machine code instructions that tell the vulnerable program to run additional function
-access to a system shell or create a reverse command shell
-modifies the code run flow to update registers and functions of the program
-generally written in assembly language and translated into hexadecimal opcodes
-unique shellcode helps in evading AV software

-understanding of x86 and x64 CPU architectures
-assembly language
-strong knowledge of C programming language
-familiarity with linux and windows os

Syscall: program requests the kernel to do something
-each OS has a different calling convention regarding syscalls
Linux: https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/

grab the thm.asm code
nasm -f elf64 thm.asm
nasm: compile .asm code
-f elf64: 64bit linux
-returns thm.o : object code
ld thm.o -o thm
ld: link object and obtain final executable
-o: output
./thm
-returns "THM,Rocks!"

objdump -d thm
-dumps .text section of the compiled binary
objcopy -j .text -O binary thm thm.text
-extract the text section into a new file thm.text
xxd -i thm.text
-output binary file in a C string directly

grab thm.c
gcc -g -Wall -z execstack thm.c -o thmx
./thmx
returns: "THM, Rocks!"

grab flag.c
gcc -g -Wall -z execstack flag.c -o flagx
./flagx
retuns flag: THM{y0ur-1s7-5h311c0d3}


