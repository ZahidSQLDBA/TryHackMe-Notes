1.Find signatures in malicious code
2.Implement documented obfuscation methodology to break signatures
3. non-obfuscation-based techniques to break non-function oriented signatures

----------------------------------------------------------------------------------

head, dd, or split: split a compiled binary
eg. head --bytes 29 example.exe > half.exe

ThreatChecker.exe -f shell.exe -e ASMI
-round to nearest thousand
51000


-----------------------------------------------------------------------------------

Automating Signature Identification
-Find-AVSignature will split a provided range of bytes through a given interval
-need to set appropriate interval

ThreatCheck
-fork of DefenderCheck 
-most widely used/reliable 
-used to id signatures
ThreatCheck.exe --help
-f: file
-u: url
-e: scanning engine (options: Defender(default), AMSI)
-false positives could occur

AMSITrigger
-runtime
-makes signatures harder to id and resolve
amsitrigger.exe --help
-i: input value, inputfile
-u: url
-f: format
-d: debug
-m: maximum signature length, default 2048
-c: chunk size default 4096

ThreatChecker.exe -f shell.exe -e ASMI
-bad byte at offset: 0xC544

--------------------------------------------------------------------------------------------------------

Obfuscating methods
1. Method Proxy: Creates a proxy method or a replacement object
2. Method Scattering/Aggregation: COmbine multiple methods into one or scatter a method into several
3. Method Clone: Create replicas of methhod and randomly call each

Obfuscating classes:
1. Class Hierarchy Flattening: create proxies of classes using interfaces
2. Class Splitting/Coalescing: transfer local variables or instruction groups to another class
3. Dropping Modifiers: Remove class modifiers (public, private) and make all members public

Splitting and Merging Objects

